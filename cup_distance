import cv2
import numpy as np
import serial

'''ser = serial.Serial('/dev/ttyACM0', 9600)'''
cap = cv2.VideoCapture(0)
counter = 0
pixelcount = []
for i in range(640):
	pixelcount.append(0)
boundary = [0, 0, 0, 0]

while True: 
	ret, frame = cap.read()
	#mask for grass
	hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
	lower_bound = np.array([115, 51, 30])
	upper_bound = np.array([175, 208, 127])
	mask = cv2.inRange(hsv, lower_bound, upper_bound)
	frame = cv2.bitwise_and(frame, frame, mask=mask)
	#check pixel density every 100 pic
	if counter == 10: 
		counter = 0
		height = frame.shape[0]
		width = frame.shape[1]
		firstcoor = 0
		boundary = [0, 0, 0, 0]
		for i in range(width):
			pixel = 0
			pixelcount[i] = 0
			num = np.uint8(0)
			for j in range(height//2):
				if (frame[j][i][0] != num or frame[j][i][1] != num or frame[j][i][2] != num):
					pixel += 1
			if pixel > 25:
				pixelcount[i] = pixel
			#clear if density too small
				if firstcoor == 0:
					firstcoor = i
			elif firstcoor != 0:
				if i - firstcoor < 15:
					for j in range(firstcoor, i):
						pixelcount[j] = 0
				firstcoor = 0
			#find range for left and right
			if i < width//2:
				if pixelcount[i] != 0:
					if boundary[0] == 0:
						boundary[0] = i
					else:
						boundary[1] = i
			else:
				if pixelcount[i] != 0:
					if boundary[2] == 0:
						boundary[2] = i
					else:
						boundary[3] = i
		leftdiff = boundary[1] - boundary[0]
		rightdiff = boundary[3] - boundary[2]
		output = leftdiff*1000 + rightdiff
		ser.write(output, '\n')
	counter += 1
	#show density
	for i in range(640):
		if pixelcount[i] != 0:
			frame = cv2.line(frame, (i, 480), (i, 480-pixelcount[i]), (255, 255, 0), 1)
	frame = cv2.line(frame, (boundary[0], 480), (boundary[0], 0), (0, 0, 255), 1)
	frame = cv2.line(frame, (boundary[1], 480), (boundary[1], 0), (0, 0, 255), 1)
	frame = cv2.line(frame, (boundary[2], 480), (boundary[2], 0), (0, 0, 255), 1)
	frame = cv2.line(frame, (boundary[3], 480), (boundary[3], 0), (0, 0, 255), 1)
	if leftdiff > rightdiff:
		cv2.putText(frame, "turn right", (10, 480-10), cv2.FONT_HERSHEY_COMPLEX, 0.7, (255, 255, 255), 2)
	else:
		cv2.putText(frame, "turn left", (10, 480-10), cv2.FONT_HERSHEY_COMPLEX, 0.7, (255, 255, 255), 2)
	print('left1:', boundary[0], 'left2:', boundary[1], 'right1:', boundary[2], 'right2:', boundary[3])
	cv2.imshow('result', frame)
	if cv2.waitKey(1) == ord('q'):
		break
cap.release()
cv2.destroyAllWindows()
