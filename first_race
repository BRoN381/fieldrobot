import numpy as np
import cv2



def getContours(img, imgcontours):
    contours, hierarchy = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    for i in contours:
        area = cv2.contourArea(i)
        if area > 1500:
            arclen = cv2.arcLength(i, True)
            approx = cv2.approxPolyDP(i, arclen*0.02, True)
            if len(approx) == 7:
                cv2.drawContours(imgcontours, i, -1,(153,204,0), 7)
                x1, y1, w1, h1 = cv2.boundingRect(approx)
                newapp = np.ravel(approx)
                maximum = 0
                secmaximum = 0
                for j in range(0, len(newapp), 2):
                    if newapp[j] > maximum:
                        maximum = newapp[j]
                    elif newapp[j] > secmaximum:
                        secmaximum = newapp[j]
                if abs(maximum - secmaximum) < w1/4:
                    cv2.putText(imgcontours, "left", (x1+w1+10, y1+30), cv2.FONT_HERSHEY_COMPLEX, 0.7, (255,255,153), 2)
                else:
                    cv2.putText(imgcontours, "right", (x1+w1+10, y1+30), cv2.FONT_HERSHEY_COMPLEX, 0.7, (255,255,153), 2)
                cv2.putText(imgcontours, "area"+str(int(area)), (x1+w1+10, y1+10), cv2.FONT_HERSHEY_COMPLEX, 0.7, (255,255,153), 2)

def cupdetect(frame, counter):
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    lower_bound = np.array([118, 38, 34])
    upper_bound = np.array([177, 237, 172])
    mask = cv2.inRange(hsv, lower_bound, upper_bound)
    frame = cv2.bitwise_and(frame, frame, mask=mask)

    height = frame.shape[0]
    width = frame.shape[1]
    leftbound = {'minmax': [0,0], 'coor': [0,0]}
    rightbound = {'minmax': [0,0], 'coor': [0,0]}
    counter = counter + 1
    if counter == 100:
    	counter = 0
    	for i in range(width):
    		pixel = 0
    		num = np.uint8(0)
    		for j in range(height//2):
    			if (frame[j][i][0] != num or frame[j][i][1] != num or frame[j][i][2] != num):
    				pixel += 1
    			frame = cv2.line(frame, (i, height), (i, height-pixel), (255, 255, 0), 1)
    		if i < width//2:
    			if pixel > 10:
    				if leftbound['minmax'][0] != 0:
    					leftbound['minmax'][0] = pixel
    					leftbound['coor'][0] = i
    				if leftbound['minmax'][1] < pixel:
    					leftbound['minmax'][1] = pixel
    					leftbound['coor'][1] = i
    		else:
    			if pixel > 10:
    				if rightbound['minmax'][0] != 0:
    					rightbound['minmax'][0] = pixel
    					rightbound['coor'][0] = i
    				if rightbound['minmax'][1] < pixel:
    					rightbound['minmax'][1] = pixel
    					rightbound['coor'][1] = i
    	coordiff = [leftbound['coor'][1]-leftbound['coor'][0], rightbound['coor'][1]-rightbound['coor'][0]]
    	if coordiff[0] > coordiff[1]:
    		cv2.putText(frame, "turn right", (10, height-10), cv2.FONT_HERSHEY_COMPLEX, 0.7, (255, 255, 150), 2)
    	else:
    		cv2.putText(frame, "turn left", (10, height-10), cv2.FONT_HERSHEY_COMPLEX, 0.7, (255, 255, 150), 2)
    return counter

cap = cv2.VideoCapture(0)
counter = 0
while True:
    ret, frame = cap.read()
    imgcontours = frame.copy()

    grey = cv2.cvtColor(imgcontours, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(grey, (5,5), 0)
    edge = cv2.Canny(blur, 100, 255)
    kernel = np.ones((4,4))
    dilate = cv2.dilate(edge, kernel, 1)
    opening = cv2.morphologyEx(dilate, cv2.MORPH_OPEN, kernel)

    getContours(opening, imgcontours)
    counter = cupdetect(frame, counter)

    cv2.imshow('arrow', imgcontours)
    cv2.imshow('cup', frame)

    if cv2.waitKey(1) == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
